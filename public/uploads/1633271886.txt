<template>
  <div>
    <sideBar></sideBar>
    <div class="main-panel">
      <navBar></navBar>
      <div class="content">
        <div class="container-fluid">
          <div class="row">
            <div class="col-lg-12">
              <div class="content-panel">
                <div id="table">
                  <VueGoodTable
                    ref="users"
                    :columns="columns"
                    :rows="rows"
                    @on-page-change="onPageChange"
                    @on-sort-change="onSortChange"
                    @on-column-filter="onColumnFilter"
                    @on-per-page-change="onPerPageChange"
                   
                    :isLoading.sync="isLoading"
                    :search-options="{
                                        enabled: true,
                                        width: '100px',
                                        placeholder:'Search Group'
                                    }"
                    :sort-options="{
                                        enabled: true,
                                        initialSortBy: {
                                            field: 'name',
                                            type: 'asc'
                                        }
                                    }"
                    :pagination-options="{
                                        enabled: true,
                                        mode: 'pages',
                                        perPage: 10,
                                        position: 'top',
                                        perPageDropdown: [25, 50, 100],
                                        dropdownAllowAll: false,
                                        setCurrentPage: 1,
                                        nextLabel: 'next',
                                        prevLabel: 'prev',
                                        rowsPerPageLabel: 'Rows per page',
                                        ofLabel: 'of',
                                        pageLabel: 'page', // for 'pages' mode
                                        allLabel: 'All'
                                    }"
                  >
                    <div slot="table-actions">
                     
                        <button class="btn btn-small" @click="openModal($event)" modalName="Add Population" style="margin-right:10px;">NEW</button>
                     
                    </div>
                   

                    <div slot="table-row" slot-scope="props">
                      <span v-if="props.column.field == 'btn'">
                        <div style="display:flex;">
                            <button
                              @click="deleteRecord(props.formattedRow)"
                              class="btn btn-sm primary"
                              style="margin-right:10px;"
                              type="button"
                            >DELETE</button>

                             <!-- <button
                              @click="openEditModal(props.formattedRow)"
                              class="btn btn-sm primary"
                              style="margin-right:10px;"
                              type="button"
                            >EDIT</button> -->
                         
                        </div>
                        
                      </span>
                      <span v-else>
                        {{
                        props.formattedRow[
                        props.column.field
                        ]
                        }}
                      </span>
                    </div>
                  </VueGoodTable>

        <modal ref="industryPad" title="NEW GROUP" hide-footer  no-close-on-backdrop :hide-ok="true" no-close-on-esc  cancel-disabled centered>
                    
                  <form>
                    <div class="row">
                      <div class="col-md-12 pr-1">
                        <div class="form-group">
                          <label> Name</label>
                          <input type="text" class="form-control" v-model="name"  />
                          <span style="color:red;">
                            {{whatsappError}}
                          </span>
                        </div>
                      </div>
                      
                    </div>
                  
                    <button
                   
                      type="submit"
                      class="btn btn-info btn-fill pull-left"
                      @click="addIndustry($event)"
                    >{{text}}
                      <Spinner v-show="saving" size="small"></Spinner>
                    
                    </button>
                    <div class="clearfix"></div>
                  </form>
                      
        </modal>

      

                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- <siteFooter></siteFooter> -->
    </div>
  </div>
</template>
<script>
import Vue from "vue";
import navBar from "../navBar.vue";
import sideBar from "../sideBar.vue";
import siteFooter from "./siteFooter.vue";
import { VueGoodTable } from "vue-good-table";
import "vue-good-table/dist/vue-good-table.css";
import axios from "axios";
import VueToast from "vue-toast-notification";
import "vue-toast-notification/dist/theme-default.css";
import "vue-loading-overlay/dist/vue-loading.css";
import Loading from "vue-loading-overlay";
Vue.use(Loading);
Vue.use(VueToast);
import vueSignature from "vue-signature"
import modal from 'vue-modality'
import Spinner from 'vue-simple-spinner'
import envFile from "@/js/env.js";

export default {
  name: "groups",
  components: {
    navBar,
    sideBar,
    siteFooter,
    Loading,
    VueGoodTable,
    vueSignature,
    modal,
    Spinner
  },
   data() {
    return {
      
      formstate: {},
      showWarning:false,
      isLoading:true,
      saving:false,
      text:"Save",
      editText:"Edit",
      option:[],
      data_name:"groups",
      whatsappError:"",
      name:"",
      id:"",
      columns: [
        {
          label: "id",
          field: "id",
          hidden: true,
        },
        {
          label: "NAME",
          field: "name",
        },
          {
          label: "CHAT ID",
          field: "chatId",
        },
          {
          label: "LINK",
          field: "groupInviteLink",
        },
        {
          label: "Action",
          field: "btn",
          html: true,
        },
      ],
      rows: [],
    };
  },
  methods:{
    openModal()
    {
      this.name =null;
      this.whatsappError=null;
      this.text="Save";
      this.saving = false;
      this.$refs.industryPad.open();
    },
     removeItem: function () {
        const item = this.rows.findIndex((p) => p.id === arguments[0]);
        this.rows.splice(item, 1);
    },
    deleteRecord(record)
    {
        this.isLoading =true
        axios
        .delete("api/deleteGroup?id="+ record.id+"&data_name="+this.data_name)
        .then((response) => {
              this.isLoading =false
          if (response.data.status === 204) {
             Vue.$toast.open({
              message: response.data.message,
              type: response.data.type,
              position: response.data.position,
            });

            this.removeItem(record.id)

          } else {
            Vue.$toast.open({
              message: response.data,
              type: "error",
              position: "top",
            });
          }
        })
        .catch((error) => {
              this.isLoading =false
          Vue.$toast.open({
            message: error.message,
            type: "error",
            position: "top",
          });
        });

    },
    openEditModal(record)
    {
        this.name = record.name;
        this.id = record.id;
        this.$refs.editIndustryPad.open();
    },
    saveGroupDetails()
    {

        let payload = {
          "chatId" :arguments[0].data.message.chatId,
          "groupInviteLink":arguments[0].data.message.groupInviteLink,
          "name":this.name,
        }

          axios
            .post("api/newGroup?data_name="+this.data_name , payload)
            .then((response) => {
            if(response.data.status == 201)
            {
              this.saving =false;
              this.text ="Save"
                Vue.$toast.open({
                    message: response.data.message,
                    type: response.data.type,
                    position: response.data.position,
                });
                this.name ="";
                this.$refs.industryPad.hide();
                setTimeout(() => {
                    this.loadItems()
                }, 3500);
                
            }else{
               this.saving =false;
              this.text ="Save"
                Vue.$toast.open({
                            message: response.data.message,
                            type: response.data.type,
                            position: response.data.position,
                        });
                }
            })
                .catch((error) => {
                this.saving = false;
                this.text ="Save"
                Vue.$toast.open({
                    message: error.message,
                    type: "error",
                    position: "top",
                });
                });
    },
     addIndustry(event)
    {
            this.saving =true;
            this.text =""
            this.whatsappError ="";
            event.preventDefault();
            let data = {
                name:this.name,
            };

            if(this.name==null)
            {
                 this.whatsappError ="Group name cannot be empty";
                 this.text="Save";
                 this.saving = false;
                 return;
            }
            if(this.name.length >= 25)
            {
              this.whatsappError ="Name cannot be more than 25 characters long"
              this.text ="Save";
              this.saving =false;
              return;
            }else{
               axios
                .post(envFile.URL+'api/v1/bot/group/create',data,{headers: {'Access-Control-Allow-Origin': '*'}})
                .then((response) => {
                if(response.status == 201)
                {
                  if(response.data.message.created)
                  {
                    if(response.data.message.chatId != null || response.data.message.groupInviteLink != null)
                    {
                       this.saveGroupDetails(response)
                    }
                  }else{

                      this.whatsappError = response.data.message
                      this.text ="Save"
                      this.saving = false;
                  }
                }
                if(response.status == 503)
                {
                    this.whatsappError = "Service Unavailable";
                    this.text="Save";
                    this.saving =false
                }
                })
                  .catch((error) => {
                    this.saving = false;
                    this.text ="Save"
                    this.whatsappError=error.message;
                    });
            }
    },
         updateParams(newProps) {
      this.serverParams = Object.assign({}, this.serverParams, newProps);
    },
            onPageChange(params) {
      this.updateParams({ page: params.currentPage });
      this.loadItems();
    },

    onPerPageChange(params) {
      this.updateParams({ perPage: params.currentPerPage });
      this.loadItems();
    },

    onSortChange(params) {
      this.updateParams({
      });
      this.loadItems();
    },

    onColumnFilter(params) {
      this.updateParams(params);
      this.loadItems();
    },
    loadItems() {
      this.isLoading =true
      axios
        .get("api/getGroups?data_name="+this.data_name)
        .then((response) => {
           this.isLoading =false
          if (response.data.status === 200) {
             this.totalRecords = response.data[this.data_name].length;
            this.rows = response.data[this.data_name];
          } else {

            Vue.$toast.open({
              message: response.data.message,
              type: "error",
              position: "top",
            });
          }
        })
        .catch((error) => {
             this.isLoading =false
          Vue.$toast.open({
            message: error.message,
            type: "error",
            position: "top",
          });
        });
    },
  }
}
  </script>
  <style scoped>
  

  .vm-close-btn{
    display:none;
  }
  </style>